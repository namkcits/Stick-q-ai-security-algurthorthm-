import json
import hashlib
import logging
from qiskit import QuantumCircuit, Aer, execute
import random

NUM_QUBITS = 10  # Number of qubits for quantum communication

# Setting up the logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Function to create an entangled quantum circuit with a specified number of qubits
def create_entangled_qubits(num_qubits):
    circuit = QuantumCircuit(num_qubits, num_qubits)
    for i in range(1, num_qubits):
        circuit.cx(0, i)
    return circuit

# Function to encode owner data as qubits in the quantum circuit
def encode_owner_data(owner_data, circuit):
    for i, bit in enumerate(owner_data):
        if bit == '1':
            circuit.x(i)
    return circuit

# Function to perform entanglement swapping between distant qubits (quantum repeater)
def entanglement_swapping(circuit, qubit_A, qubit_B, qubit_C):
    circuit.cx(qubit_A, qubit_B)
    circuit.h(qubit_A)
    circuit.cx(qubit_C, qubit_A)
    circuit.h(qubit_C)
    circuit.cx(qubit_B, qubit_C)
    circuit.cz(qubit_A, qubit_C)

# Function to implement quantum repeaters to extend communication distance
def quantum_repeater(circuit, num_qubits):
    for i in range(num_qubits // 3):
        qubit_A = 3 * i
        qubit_B = 3 * i + 1
        qubit_C = 3 * i + 2
        entanglement_swapping(circuit, qubit_A, qubit_B, qubit_C)

# Function to implement the BB84 protocol for Quantum Key Distribution
def bb84_protocol(circuit, num_qubits, owner_data):
    # Calculate SHA256 hash of the owner data
    sha256_hash = hashlib.sha256(owner_data.encode()).hexdigest()
    logger.info(f"Owner data SHA256 hash: {sha256_hash}")

    circuit = encode_owner_data(owner_data, circuit)

    alice_basis = [random.randint(0, 1) for _ in range(num_qubits)]
    alice_bits = [random.randint(0, 1) for _ in range(num_qubits)]

    for i in range(num_qubits):
        if alice_bits[i] == 1:
            circuit.x(i)
        if alice_basis[i] == 1:
            circuit.h(i)

    bob_basis = [random.randint(0, 1) for _ in range(num_qubits)]

    for i in range(num_qubits):
        if bob_basis[i] == 1:
            circuit.h(i)

    quantum_repeater(circuit, num_qubits)

    circuit.measure(range(num_qubits), range(num_qubits))

    backend = Aer.get_backend('qasm_simulator')  # Using AER simulator as the backend
    job = execute(circuit, backend)
    result = job.result()
    counts = result.get_counts(circuit)

    alice_basis_str = ''.join(str(b) for b in alice_basis)
    bob_basis_str = ''.join(str(b) for b in bob_basis)
    shared_basis_info = {'alice_basis': alice_basis_str, 'bob_basis': bob_basis_str}

    return counts, shared_basis_info

# Function to verify the shared key between Alice and Bob
def verify_shared_key(circuit, alice_basis_str, bob_basis_str):
    if alice_basis_str == bob_basis_str:
        circuit.measure(0, 0)

        backend = Aer.get_backend('qasm_simulator')
        job = execute(circuit, backend)
        result = job.result()
        counts = result.get_counts(circuit)
        shared_key = list(counts.keys())[0]

        if alice_basis_str == '0':
            if shared_key == '0':
                logger.info("Shared key verified in Hadamard basis.")
            else:
                logger.warning("Key tampering detected in Hadamard basis.")
        else:
            if shared_key == '1':
                logger.info("Shared key verified in Hadamard-S basis.")
            else:
                logger.warning("Key tampering detected in Hadamard-S basis.")
    else:
        logger.warning("Alice and Bob measured the qubit in different bases. Key tampering detected.")

if __name__ == "__main__":
    # Owner data to be encoded as qubits (Example: "1100101010")
    owner_data = "add user data"

    # Create an entangled circuit
    circuit = create_entangled_qubits(NUM_QUBITS)

    # Perform BB84 protocol with quantum repeaters for QKD
    counts, shared_basis_info = bb84_protocol(circuit, NUM_QUBITS, owner_data)

    # Verify shared key between Alice and Bob
    verify_shared_key(circuit, shared_basis_info['alice_basis'], shared_basis_info['bob_basis'])

    # Save results to a secure file
    results = {
        'owner_data': owner_data,
        'owner_data_hash': hashlib.sha256(owner_data.encode()).hexdigest(),
        'counts': counts,
        'shared_basis_info': shared_basis_info
    }

    # Save the results as JSON data in a file
    with open('secure_results.json', 'w') as file:
        json.dump(results, file)
